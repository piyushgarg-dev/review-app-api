// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthenticationType {
  EMAIL_PASSWORD
  GOOGLE
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectAccessRole {
  OWNER
  ADMIN
}

model User {
  id                   String                 @id @default(uuid())
  firstName            String                 @map("first_name")
  lastName             String?                @map("last_name")
  email                String                 @unique
  emailVerified        Boolean                @default(false) @map("email_verified")
  password             String?
  salt                 String?
  authenticationType   AuthenticationType     @map("authentication_type")
  profileImageURL      String?
  role                 UserRole               @default(USER)
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  ProjectAccessMapping ProjectAccessMapping[]
  Forms                Form[]

  @@map("users")
}

model Project {
  id                   String                 @id @default(uuid())
  name                 String
  subdomain            String                 @unique
  customDomain         String?                @unique @map("custom_domain")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  ProjectAccessMapping ProjectAccessMapping[]
  Forms                Form[]

  @@map("projects")
}

model ProjectAccessMapping {
  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @map("project_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  role ProjectAccessRole @default(OWNER)

  @@unique([projectId, userId])
  @@map("project_access_mapping")
}

model Form {
  id   String @id @default(uuid())
  name String
  slug String

  introTitle   String  @map("intro_title")
  introMessage String? @map("intro_message")

  promptTitle       String  @map("prompt_title")
  promptDescription String? @map("prompt_description")

  thankyouTitle   String  @map("thankyou_title")
  thankyouMessage String? @map("thankyou_message")

  enableCTA Boolean @default(false) @map("enable_cta")
  ctaTitle  String? @map("cta_title")
  ctaURL    String? @map("cta_url")

  // Foreign Relations
  project         Project @relation(fields: [projectId], references: [id])
  projectId       String  @map("project_id")
  createdBy       User    @relation(fields: [createdByUserId], references: [id])
  createdByUserId String  @map("created_by")

  isActive Boolean @default(true) @map("is_active")

  // Design
  primaryColor    String @default("#6701E6") @map("primary_color_hex_code")
  backgroundColor String @default("#FFFFFF") @map("background_color_hex_code")

  // Prefrences
  lang                     String  @default("en")
  collectVideoTestimonials Boolean @default(false) @map("collect_video_testimonials")
  collectTextTestimonials  Boolean @default(true) @map("collect_text_testimonials")
  collectRatings           Boolean @default(true) @map("collect_ratings")
  collectImages            Boolean @default(true) @map("collect_images")
  collectEmail             Boolean @default(true) @map("collect_email")
  collectJobTitle          Boolean @default(true) @map("collect_job_title")
  collectUserImage         Boolean @default(true) @map("collect_user_image")
  collectWebsiteURL        Boolean @default(true) @map("collect_website_url")
  collectCompany           Boolean @default(true) @map("collect_company")

  autoApproveTestimonials Boolean  @default(false) @map("auto_approve_testimonials")
  autoAddTags             String[] @default([]) @map("auto_add_tags")
  chore: Update schema.prisma

  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  responses FormResponse[]

  @@unique([slug, projectId])
  @@map("forms")
}

model FormResponse {
  id String @id @default(uuid())

  // Relations
  form   Form   @relation(fields: [formId], references: [id])
  formId String @map("form_id")

  // Form filler details
  name        String
  email       String?
  imageURL    String? @map("image_url")
  rating      Int?
  testimonial String  @map("testimonial")
  jobTitle    String? @map("job_title")
  websiteUrl  String? @map("website_url")
  company     String?

  tags     String[] @default([]) @map("tags")
  approved Boolean  @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("form_responses")
}
